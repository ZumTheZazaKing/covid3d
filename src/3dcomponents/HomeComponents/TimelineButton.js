/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Jetstorm-3D (https://sketchfab.com/Jetstorm_477)
license: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
source: https://sketchfab.com/3d-models/wide-clock-2ee535f286354b7eb0268e829547b8a3
title: Wide Clock
*/

import { useRef, useState, useEffect } from "react";
import { useGLTF, Html } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useSpring, animated, config } from "@react-spring/three";
/*
export default function TimelineButton(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/clock.glb");
  useFrame(() => {
    group.current.rotation.z += 0.01
  })

  const [hovered, setHovered] = useState(false)

  useEffect(() => {
    document.body.style.cursor = hovered ? 'pointer' : 'auto'
  }, [hovered])
  const { scale } = useSpring({
    scale: hovered ? 60 : 50,
    config: config.wobbly
  });

  return (
    <animated.group ref={group} {...props} dispose={null} 
      scale={scale}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
      onClick={() => {
          window.appHistory.push("/#/timeline")
          setTimeout((() => {window.location.reload()}), 100)
      }}
      position={[-100,0,0]}
    >
      <Html scaleFactor={10}
        style={{
          pointerEvents: "none", 
          display: hovered ? "block" : "none",
          color:"white",
          padding:"10px",
          backgroundColor:"rgba(0,0,0,0.5)",
          borderRadius:"5px"
        }}
      >
        <div className="content">
          Timeline
        </div>
      </Html>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={nodes.Object_2.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={nodes.Object_3.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.default_default_1_2}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={materials.default_default_1_3}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.default_default_1_5}
        />
      </group>
    </animated.group>
  );
}

useGLTF.preload("/clock.glb");
*/
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Virtual Museums of MaÅ‚opolska (https://sketchfab.com/WirtualneMuzeaMalopolski)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/joachim-liebermanns-pocket-watch-057658eddc6a4729af79b02ca1e68513
title: Joachim Liebermann's pocket watch
*/
export default function TimelineButton(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/clock2.glb");
  useFrame(() => {
    group.current.rotation.y += 0.01
  })

  const [hovered, setHovered] = useState(false)

  useEffect(() => {
    document.body.style.cursor = hovered ? 'pointer' : 'auto'
  }, [hovered])
  const { scale } = useSpring({
    scale: hovered ? 1.2 : 1,
    config: config.wobbly
  });
  return (
    <animated.group ref={group} {...props} dispose={null}
      scale={scale}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
      onClick={() => {
          window.appHistory.push("/#/timeline")
          setTimeout((() => {window.location.reload()}), 100)
      }}
      position={[-150,0,0]}
    >
      <Html scaleFactor={10}
        style={{
          pointerEvents: "none", 
          display: hovered ? "block" : "none",
          color:"white",
          padding:"10px",
          backgroundColor:"rgba(0,0,0,0.5)",
          borderRadius:"5px"
        }}
      >
        <div className="content">
          Timeline
        </div>
      </Html>
      <group position={[0.6, -0.06, 0]} rotation={[-Math.PI / 2, -0.13, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_4.geometry}
              material={materials["defaultMat.001"]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_5.geometry}
              material={materials["defaultMat.001"]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_6.geometry}
              material={materials["defaultMat.001"]}
            />
          </group>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_8.geometry}
              material={materials["defaultMat.002"]}
            />
          </group>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_10.geometry}
              material={materials["defaultMat.003"]}
            />
          </group>
        </group>
      </group>
    </animated.group>
  );
}

useGLTF.preload("/clock2.glb");
